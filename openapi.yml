openapi: "3.0.0"
info:
  title: Simple Plan API
  version: 1.0.0
paths:
  /accounts:
    post:
      x-controller: accounts
      x-operation: createUser
      tags:
        - Accounts
      summary: Create an account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
            example:
              username: username
              email: email
              password: a-password
      responses:
        201:
          description: Account created.
        400:
          description: Invalid request.
        409:
          description: Account already exists.
        420:
          description: Account password too chill.
  /accounts/{accountId}:
    parameters:
      - $ref: '#/components/parameters/PathAccountId'
    delete:
      x-controller: accounts
      x-operation: deleteUser
      tags:
        - Accounts
      summary: Delete an account.
      responses:
        204:
          description: Account deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /accounts/{accountId}/login:
    parameters:
      - $ref: '#/components/parameters/PathAccountId'
    put:
      x-controller: accounts
      x-operation: login
      tags:
        - Accounts
      summary: Log in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
              example:
                email: email
                password: a-password
      responses:
        200:
          description: Authenticated.
        400:
          description: Invalid request.
        403:
          description: Access denied.
  /accounts/{accountId}/logout:
    parameters:
      - $ref: '#/components/parameters/PathAccountId'
    put:
      x-controller: accounts
      x-operation: logout
      tags:
        - Accounts
      summary: Log out.
      responses:
        200:
          description: Logged out.
        403:
          description: Access denied.
  /taskLists:
    get:
      x-controller: tasklists
      x-operation: listTaskLists
      tags:
        - Task Lists
      summary: Get task lists.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskLists'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    post:
      x-controller: tasklists
      x-operation: createTaskList
      tags:
        - Task Lists
      summary: Add a task list.
      requestBody:
        $ref: '#/components/requestBodies/SetTaskList'
      responses:
        201:
          description: Task list created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskLists'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /taskLists/{taskListId}:
    parameters:
      - $ref: '#/components/parameters/PathTaskListId'
    put:
      x-controller: taskLists
      x-operation: updateTaskList
      tags:
        - Task Lists
      summary: Update a task list.
      requestBody:
        $ref: '#/components/requestBodies/SetTaskList'
      responses:
        200:
          description: Task list updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Not found.
    delete: 
      x-controller: taskLists
      x-operation: deleteTaskList
      tags:
        - Task Lists
      summary: Delete a Task List.
      responses:
        204:
          description: Task list deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /tasks:
    get:
      x-controller: tasks
      x-operation: listTasks
      tags:
        - Tasks
      summary: Get tasks.
      parameters:
        - name: completed
          in: query
          schema:
            type: boolean
        - name: duration
          in: query
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    post:
      x-controller: tasks
      x-operation: createTask
      tags:
        - Tasks
      summary: Add a task.
      requestBody:
        $ref: '#/components/requestBodies/SetTask'
      responses:
        201:
          description: Task created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /tasks/{taskId}:
    parameters:
      - $ref: '#/components/parameters/PathTaskId'
    put:
      x-controller: tasks
      x-operation: updateTask
      tags:
        - Tasks
      summary: Update a task.
      requestBody:
        $ref: '#/components/requestBodies/SetTask'
      responses:
        200:
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Not found.
    delete: 
      x-controller: tasks
      x-operation: deleteTask
      tags:
        - Tasks
      summary: Delete a task.
      responses:
        204:
          description: Task deleted
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /events:
    get:
      x-controller: events
      x-operation: getEvents
      tags:
        - Events
      summary: Get events.
      parameters:
        - name: occurred
          in: query
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
    post:
      x-controller: events
      x-operation: createEvent
      tags:
        - Events
      summary: Add an event.
      requestBody:
        $ref: '#/components/requestBodies/SetEvent'
      responses:
        201:
          description: Event created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /events/{eventId}:
    parameters:
      - $ref: '#/components/parameters/PathEventId'
    put:
      x-controller: events
      x-operation: updateEvent
      tags:
        - Events
      summary: Update an event.
      requestBody:
        $ref: '#/components/requestBodies/SetEvent'
      responses:
        205:
          description: Event updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Not found.
    delete:
      x-controller: events
      x-operation: deleteEvent
      tags:
        - Events
      summary: Delete an event.
      responses:
        204:
          description: Event deleted.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
  /notes:
    put:
      x-controller: notes
      x-operation: updateNote
      tags:
        - Notes
      summary: Update notes.
      requestBody:
        $ref: '#/components/requestBodies/SetNote'
      responses:
        205:
          description: Note updated.
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
        403:
          description: Access denied.
        404:
          description: Not found.
components:
  parameters:
    PathAccountId:
      name: accountId
      in: path
      required: true
      schema: 
        type: string
    PathTaskListId:
      name: taskListId
      in: path
      required: true
      schema: 
        type: string
    PathTaskId:
      name: taskId
      in: path
      required: true
      schema: 
        type: string
    PathEventId:
      name: eventId
      in: path
      required: true
      schema: 
        type: string
  requestBodies:
    SetTaskList:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskList'
    SetTask:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    SetEvent:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
    SetNote:
      required: true
      content:
        text/plain:
          schema:
            type: string
  schemas:
    TaskList:
      type: object
      required:
        - title
      properties:
        listId:
          type: string
          readOnly: true
        title:
          type: string
        tasks:
          type: array
          items:
            type: string
        completed:
          type: string
          format: date-time
          nullable: true
    TaskLists:
      type: array
      items:
        $ref: '#/components/schemas/TaskList'
    Task:
      type: object
      required:
        - title
        - duration
      properties:
        taskId:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
        duration:
          type: integer
        complete:
          type: string
          format: date-time
          nullable: true
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Event: 
      type: object
      required:
        - title
        - start
        - end
      properties:
        taskId:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'